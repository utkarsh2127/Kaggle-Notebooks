{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9200871,"sourceType":"datasetVersion","datasetId":3680745}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/morpho23/jobfit-tailored-recommendations-based-on-skills?scriptVersionId=237939066\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"<div style=\"\n    font-family: 'Courier New', monospace;\n    font-size: 20px;\n    font-weight: bold;\n    text-align: center;\n    color: #EAECEE;\n    background-color: #1e1e1e;\n    padding: 25px;\n    border: 2px solid #3498DB;\n    border-radius: 14px;\n    box-shadow: 0 4px 12px rgba(52, 152, 219, 0.4);\">\n    üöÄ LinkedIn-Based AI Job Recommender | Skill Matching & Insights üîç\n</div>","metadata":{}},{"cell_type":"markdown","source":"<div style=\"background-color:#1e1e1e; border: 2px solid #3498DB; border-radius:12px; padding:25px; margin-bottom:25px; color:#ECF0F1; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\n\n<h1 style=\"color:#5DADE2; font-size:32px; text-align:center; margin-bottom:20px;\">\nüîç Personalized Job Recommender: From Raw Data to Smart Matches\n</h1>\n\n<div style=\"background-color:#273746; border-left: 6px solid #5DADE2; padding:15px; border-radius:8px; font-size:16px;\">\nüí¨ <i>‚ÄúIn a world flooded with job listings, finding the right role shouldn‚Äôt feel like finding a needle in a haystack.‚Äù</i>\n</div>\n\n<br>\n\n<p style=\"font-size:15px; line-height:1.6;\">\nThis notebook builds an end-to-end job recommender system using hybrid techniques ‚Äî combining text vectorization, skill embeddings, and semantic matching with BERT. We go from raw CSVs to intelligent job recommendations, introducing filters, user-centric logic, and model comparisons along the way.\n</p>\n\n<p style=\"font-size:15px; line-height:1.6;\">\nWhether you're looking to understand job trends, deploy real-world recommendation systems, or just sharpen your data science muscles ‚Äî this notebook has something for you.\n</p>\n\n</div>\n","metadata":{}},{"cell_type":"markdown","source":"<div style=\"background-color:#1e1e1e; border: 2px solid #3498DB; border-radius:10px; padding:20px; margin-bottom:20px; color:#ECF0F1; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\n\n<h1 style=\"color:#5DADE2;\">\nüìö Step 1: Importing Libraries\n</h1>\n\n<div style=\"background-color:#273746; border-left: 5px solid #5DADE2; padding:12px; border-radius:6px; margin-top:10px;\">\nüì¶ Bringing in the essential Python libraries for data processing, NLP, modeling, and evaluation.\n</div>\n\n</div>","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport shap\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:34:56.557219Z","iopub.execute_input":"2025-05-05T13:34:56.557612Z","iopub.status.idle":"2025-05-05T13:34:59.517297Z","shell.execute_reply.started":"2025-05-05T13:34:56.557584Z","shell.execute_reply":"2025-05-05T13:34:59.516523Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<h1 style=\"color:#2E86C1; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\nüìÅ Step 2: Load Required CSV Files\n</h1>\n\n<p style=\"font-size:15px;\">\nWe begin by loading the foundational datasets that power our recommendation system:\n</p>\n\n<ul>\n  <li><b><code>job_postings.csv</code></b> ‚Äì Contains job titles, descriptions, salaries, experience levels, and locations</li>\n  <li><b><code>job_skills.csv</code></b> ‚Äì Maps each <code>job_id</code> to its associated <code>skill_abr</code></li>\n  <li><b><code>skills.csv</code></b> ‚Äì Decodes abbreviations like <code>MRKT</code> into readable skill names like <b>Marketing</b></li>\n</ul>\n","metadata":{}},{"cell_type":"code","source":"job_df = pd.read_csv(\"/kaggle/input/linkedin-job-postings/postings.csv\")\njob_skills = pd.read_csv(\"/kaggle/input/linkedin-job-postings/jobs/job_skills.csv\")\nskills = pd.read_csv(\"/kaggle/input/linkedin-job-postings/mappings/skills.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:23.792751Z","iopub.execute_input":"2025-05-05T13:32:23.793019Z","iopub.status.idle":"2025-05-05T13:32:31.238797Z","shell.execute_reply.started":"2025-05-05T13:32:23.792998Z","shell.execute_reply":"2025-05-05T13:32:31.237734Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"background-color:#1e1e1e; border: 2px solid #3498DB; border-radius:10px; padding:20px; margin-bottom:20px; color:#EAECEE; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\n\n<h1 style=\"color:#5DADE2;\">\nüîç Step 3: Filter and Sample the Data\n</h1>\n\n<div style=\"background-color:#273746; border-left: 5px solid #5DADE2; padding:12px; border-radius:6px; margin-top:10px;\">\n‚öôÔ∏è To ensure data quality and reduce processing time, we applied basic filtering and sampling logic.\n</div>\n\n<ul>\n  <li><b>Missing Value Removal</b> ‚Äì Dropped jobs with nulls in critical fields</li>\n  <li><b>Sampling</b> ‚Äì Selected a random 1,000-job subset for experimentation</li>\n</ul>\n\n</div>","metadata":{}},{"cell_type":"code","source":"filtered_df = job_df.dropna(subset=['title', 'description', 'location', 'skills_desc', 'formatted_experience_level'])\nsampled_df = filtered_df.sample(n=1000, random_state=42).reset_index(drop=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.240788Z","iopub.execute_input":"2025-05-05T13:32:31.241098Z","iopub.status.idle":"2025-05-05T13:32:31.310461Z","shell.execute_reply.started":"2025-05-05T13:32:31.241072Z","shell.execute_reply":"2025-05-05T13:32:31.309588Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"background-color:#1e1e1e; border: 2px solid #3498DB; border-radius:10px; padding:20px; margin-bottom:20px; color:#ECF0F1; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\n\n<h1 style=\"color:#5DADE2;\">\nüîó Step 3: Merge Skills Data\n</h1>\n\n<div style=\"background-color:#273746; border-left: 5px solid #5DADE2; padding:12px; border-radius:6px; margin-top:10px;\">\nüß† Enrich each job posting with human-readable skill names to enable meaningful similarity computation.\n</div>\n\n<ul>\n  <li><b>Joining</b> <code>job_skills.csv</code> and <code>skills.csv</code> on <code>skill_abr</code></li>\n  <li><b>Combining</b> skills with job postings to form complete profiles</li>\n  <li><b>Filtering out</b> jobs with only generic \"Other\" skills</li>\n</ul>\n\n</div>","metadata":{}},{"cell_type":"code","source":"job_skills_merged = job_skills.merge(skills, on='skill_abr', how='left')\nsampled_job_ids = sampled_df['job_id']\nsampled_skills = job_skills_merged[job_skills_merged['job_id'].isin(sampled_job_ids)]\n\njob_skill_text = sampled_skills.groupby('job_id')['skill_name'].apply(lambda x: ' '.join(x)).reset_index()\njob_skill_text.columns = ['job_id', 'skills_text']\n\nsampled_df = sampled_df.merge(job_skill_text, on='job_id', how='left')\nsampled_df['skills_text'] = sampled_df['skills_text'].fillna('')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.31178Z","iopub.execute_input":"2025-05-05T13:32:31.312039Z","iopub.status.idle":"2025-05-05T13:32:31.383408Z","shell.execute_reply.started":"2025-05-05T13:32:31.312018Z","shell.execute_reply":"2025-05-05T13:32:31.382581Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"background-color:#1e1e1e; border: 2px solid #3498DB; border-radius:10px; padding:20px; margin-bottom:20px; color:#ECF0F1; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\n\n<h2 style=\"color:#5DADE2;\">\nüîç What This Merge Achieves\n</h2>\n\n<ul>\n  <li>üîó Links each job posting to its full list of skill names</li>\n  <li>üìå Embeds these enriched skill lists into our 1,000-sample dataset</li>\n  <li>üßπ Excludes any job that lists only <code>\"Other\"</code> as a skill (uninformative for matching)</li>\n</ul>\n\n</div>","metadata":{}},{"cell_type":"markdown","source":"<div style=\"background-color:#1e1e1e; border: 2px solid #3498DB; border-radius:10px; padding:20px; margin-bottom:20px; color:#ECF0F1; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\n\n<h1 style=\"color:#5DADE2;\">\nüß† Hybrid Recommender System\n</h1>\n\n<h2 style=\"color:#85C1E9; margin-top:10px;\">\nüîπ Phase 1: TF-IDF Based Similarity\n</h2>\n\n<p>\nIn this stage, we combine <b>skills</b>, <b>job titles</b>, and <b>experience levels</b> to build a meaningful job representation using TF-IDF. This forms the base layer of our hybrid approach.\n</p>\n\n</div>","metadata":{}},{"cell_type":"code","source":"sampled_df['hybrid_text'] = (\n    sampled_df['skills_text'].fillna('') + ' ' +\n    sampled_df['title'].fillna('') + ' ' +\n    sampled_df['formatted_experience_level'].fillna('')\n)\n\nhybrid_vectorizer = TfidfVectorizer(stop_words='english')\nhybrid_matrix = hybrid_vectorizer.fit_transform(sampled_df['hybrid_text'])\nhybrid_sim_matrix = cosine_similarity(hybrid_matrix, hybrid_matrix)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.384373Z","iopub.execute_input":"2025-05-05T13:32:31.384672Z","iopub.status.idle":"2025-05-05T13:32:31.438884Z","shell.execute_reply.started":"2025-05-05T13:32:31.384638Z","shell.execute_reply":"2025-05-05T13:32:31.43808Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"background-color:#1e1e1e; border: 2px solid #3498DB; border-radius:10px; padding:20px; margin-bottom:20px; color:#ECF0F1; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\n\n<h3 style=\"color:#85C1E9;\">\n‚öôÔ∏è How the TF-IDF Engine Works\n</h3>\n\n<ol>\n  <li><b>Create a unified text field</b> called <code>hybrid_text</code> that merges:\n    <ul>\n      <li>üîπ <code>skills_text</code></li>\n      <li>üîπ <code>title</code></li>\n      <li>üîπ <code>formatted_experience_level</code></li>\n    </ul>\n  </li>\n  <li><b>Apply TF-IDF vectorization</b> ‚Äì emphasizes rare but insightful terms</li>\n  <li><b>Transform jobs into vectors</b> ‚Äì numerical matrix encodes content structure</li>\n  <li><b>Use cosine similarity</b> to compare how ‚Äúclose‚Äù any two jobs are</li>\n</ol>\n\n</div>","metadata":{}},{"cell_type":"markdown","source":"<div style=\"background-color:#1e1e1e; border: 2px solid #3498DB; border-radius:10px; padding:20px; margin-bottom:20px; color:#ECF0F1; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\n\n<h2 style=\"color:#85C1E9;\">\nüîπ Phase 2: Count Vectorizer Approach\n</h2>\n\n<div style=\"background-color:#273746; border-left: 5px solid #5DADE2; padding:12px; border-radius:6px; margin-top:10px;\">\nWe now experiment with a simpler alternative to TF-IDF: the <b>Count Vectorizer</b>.  \nThis method still combines <code>skills</code>, <code>title</code>, and <code>experience</code>, but focuses on raw token frequencies instead of term importance.\n</div>\n\n</div>\n","metadata":{}},{"cell_type":"code","source":"alt_vectorizer = CountVectorizer()\nalt_matrix = alt_vectorizer.fit_transform(sampled_df['hybrid_text'])\nalt_sim_matrix = cosine_similarity(alt_matrix, alt_matrix)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.439798Z","iopub.execute_input":"2025-05-05T13:32:31.44011Z","iopub.status.idle":"2025-05-05T13:32:31.474782Z","shell.execute_reply.started":"2025-05-05T13:32:31.440079Z","shell.execute_reply":"2025-05-05T13:32:31.473974Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"background-color:#1e1e1e; border: 2px solid #3498DB; border-radius:10px; padding:20px; margin-bottom:20px; color:#ECF0F1; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\n\n<h2 style=\"color:#5DADE2; font-size:26px; margin-bottom:10px;\">\nüß© Recommendation Engine: Function Core\n</h2>\n\n<div style=\"background-color:#273746; border-left: 5px solid #5DADE2; padding:12px; border-radius:6px; margin-top:10px;\">\n‚öôÔ∏è Define similarity logic, rank jobs, and retrieve tailored matches ‚Äî all packed into reusable functions.\n</div>\n\n</div>","metadata":{}},{"cell_type":"code","source":"def recommend_by_hybrid_title(title_keyword, top_n=5, method='tfidf'):\n    matches = sampled_df[sampled_df['title'].str.lower().str.contains(title_keyword.lower())]\n    if matches.empty:\n        print(\"No matching job title found.\")\n        return\n\n    job_index = matches.index[0]\n    print(f\"Found match: {sampled_df.iloc[job_index]['title']} (Index: {job_index})\\n\")\n    recommend_by_hybrid(job_index, top_n, method)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.475804Z","iopub.execute_input":"2025-05-05T13:32:31.476066Z","iopub.status.idle":"2025-05-05T13:32:31.480753Z","shell.execute_reply.started":"2025-05-05T13:32:31.476045Z","shell.execute_reply":"2025-05-05T13:32:31.479927Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def recommend_by_hybrid(job_index, top_n=5, method='tfidf'):\n    sim_matrix = hybrid_sim_matrix if method == 'tfidf' else alt_sim_matrix\n    sim_scores = list(enumerate(sim_matrix[job_index]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    top_jobs = sim_scores[1:top_n+1]\n\n    print(f\"Jobs similar to: {sampled_df.iloc[job_index]['title']} ({method}-based)\\n\")\n    for idx, score in top_jobs:\n        print(f\"Title: {sampled_df.iloc[idx]['title']}\")\n        print(f\"Location: {sampled_df.iloc[idx]['location']}\")\n        print(f\"Experience: {sampled_df.iloc[idx]['formatted_experience_level']}\")\n        print(f\"Skills: {sampled_df.iloc[idx]['skills_text']}\")\n        print(f\"Similarity Score: {score:.4f}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.481752Z","iopub.execute_input":"2025-05-05T13:32:31.482108Z","iopub.status.idle":"2025-05-05T13:32:31.497489Z","shell.execute_reply.started":"2025-05-05T13:32:31.482083Z","shell.execute_reply":"2025-05-05T13:32:31.496476Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"recommend_by_hybrid_title(\"Data Analyst\", top_n=5, method='tfidf')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.501121Z","iopub.execute_input":"2025-05-05T13:32:31.50149Z","iopub.status.idle":"2025-05-05T13:32:31.522215Z","shell.execute_reply.started":"2025-05-05T13:32:31.501462Z","shell.execute_reply":"2025-05-05T13:32:31.521254Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"recommend_by_hybrid_title(\"Engineer\", top_n=5, method='count')\nrecommend_by_hybrid_title(\"Marketing\", method='tfidf')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.523683Z","iopub.execute_input":"2025-05-05T13:32:31.523965Z","iopub.status.idle":"2025-05-05T13:32:31.550362Z","shell.execute_reply.started":"2025-05-05T13:32:31.523941Z","shell.execute_reply":"2025-05-05T13:32:31.54954Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"recommend_by_hybrid_title(\"Astronaut\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.551297Z","iopub.execute_input":"2025-05-05T13:32:31.551557Z","iopub.status.idle":"2025-05-05T13:32:31.558221Z","shell.execute_reply.started":"2025-05-05T13:32:31.551534Z","shell.execute_reply":"2025-05-05T13:32:31.557233Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sampled_df[['title', 'skills_text', 'formatted_experience_level']].head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.559052Z","iopub.execute_input":"2025-05-05T13:32:31.559335Z","iopub.status.idle":"2025-05-05T13:32:31.596469Z","shell.execute_reply.started":"2025-05-05T13:32:31.559312Z","shell.execute_reply":"2025-05-05T13:32:31.59562Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"recommend_by_hybrid(job_index=0, top_n=5, method='tfidf')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.597251Z","iopub.execute_input":"2025-05-05T13:32:31.597495Z","iopub.status.idle":"2025-05-05T13:32:31.611194Z","shell.execute_reply.started":"2025-05-05T13:32:31.597475Z","shell.execute_reply":"2025-05-05T13:32:31.610065Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"background-color:#1e1e1e; border: 2px solid #3498DB; border-radius:10px; padding:20px; margin-bottom:20px; color:#ECF0F1; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\n\n<h2 style=\"color:#5DADE2; font-size:26px; margin-bottom:10px;\">\nüíæ Exporting Recommendations\n</h2>\n\n<div style=\"background-color:#273746; border-left: 5px solid #5DADE2; padding:12px; border-radius:6px; margin-top:10px;\">\nüì§ Save the personalized job matches into a <code>.csv</code> file ‚Äî ready for analysis, sharing, or deployment.\n</div>\n\n</div>","metadata":{}},{"cell_type":"code","source":"def save_recommendations_to_csv(job_index, top_n=5, method='tfidf', filename='recommended_jobs.csv'):\n    sim_matrix = hybrid_sim_matrix if method == 'tfidf' else alt_sim_matrix\n    sim_scores = list(enumerate(sim_matrix[job_index]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    top_jobs = sim_scores[1:top_n+1]\n\n    recs = []\n    for idx, score in top_jobs:\n        recs.append({\n            'Title': sampled_df.iloc[idx]['title'],\n            'Location': sampled_df.iloc[idx]['location'],\n            'Experience': sampled_df.iloc[idx]['formatted_experience_level'],\n            'Skills': sampled_df.iloc[idx]['skills_text'],\n            'Similarity Score': round(score, 4)\n        })\n\n    pd.DataFrame(recs).to_csv(filename, index=False)\n    print(f\"Top {top_n} recommendations saved to {filename}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.612477Z","iopub.execute_input":"2025-05-05T13:32:31.612994Z","iopub.status.idle":"2025-05-05T13:32:31.626272Z","shell.execute_reply.started":"2025-05-05T13:32:31.612955Z","shell.execute_reply":"2025-05-05T13:32:31.625301Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# save_recommendations_to_csv(0, top_n=5, method='tfidf')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.627284Z","iopub.execute_input":"2025-05-05T13:32:31.62764Z","iopub.status.idle":"2025-05-05T13:32:31.639308Z","shell.execute_reply.started":"2025-05-05T13:32:31.627604Z","shell.execute_reply":"2025-05-05T13:32:31.638326Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"background-color:#1e1e1e; border: 2px solid #3498DB; border-radius:10px; padding:20px; margin-bottom:20px; color:#ECF0F1; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\n\n<h2 style=\"color:#5DADE2; font-size:26px; margin-bottom:10px;\">\nüß≤ Adding User-Centric Filters\n</h2>\n\n<div style=\"background-color:#273746; border-left: 5px solid #5DADE2; padding:12px; border-radius:6px; margin-top:10px;\">\nüéØ Refine recommendations based on individual preferences and needs.\n</div>\n\n<ul>\n  <li>üìç <b>Location</b></li>\n  <li>üìà <b>Experience Level</b></li>\n  <li>üßæ <b>Work Type</b> (e.g., Full-time, Contract)</li>\n</ul>\n\n</div>","metadata":{}},{"cell_type":"code","source":"def recommend_with_filters(job_index, top_n=5, method='tfidf', location=None, experience=None, work_type=None):\n    sim_matrix = hybrid_sim_matrix if method == 'tfidf' else alt_sim_matrix\n    sim_scores = list(enumerate(sim_matrix[job_index]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    filtered_jobs = []\n    for idx, score in sim_scores[1:]:  # skip the job itself\n        row = sampled_df.iloc[idx]\n\n        # Apply filters if specified\n        if location and location.lower() not in str(row['location']).lower():\n            continue\n        if experience and experience.lower() not in str(row['formatted_experience_level']).lower():\n            continue\n        if work_type and work_type.lower() not in str(row.get('formatted_work_type', '')).lower():\n            continue\n\n        filtered_jobs.append((idx, score))\n        if len(filtered_jobs) == top_n:\n            break\n\n    if not filtered_jobs:\n        print(\"No jobs found matching your filters.\")\n        return\n\n    print(f\"Jobs similar to: {sampled_df.iloc[job_index]['title']} ({method}-based) with filters\\n\")\n    for idx, score in filtered_jobs:\n        print(f\"Title: {sampled_df.iloc[idx]['title']}\")\n        print(f\"Location: {sampled_df.iloc[idx]['location']}\")\n        print(f\"Experience: {sampled_df.iloc[idx]['formatted_experience_level']}\")\n        print(f\"Work Type: {sampled_df.iloc[idx].get('formatted_work_type', 'N/A')}\")\n        print(f\"Skills: {sampled_df.iloc[idx]['skills_text']}\")\n        print(f\"Similarity Score: {score:.4f}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.640505Z","iopub.execute_input":"2025-05-05T13:32:31.640888Z","iopub.status.idle":"2025-05-05T13:32:31.651781Z","shell.execute_reply.started":"2025-05-05T13:32:31.640852Z","shell.execute_reply":"2025-05-05T13:32:31.650862Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"recommend_with_filters(\n    job_index=1,\n    top_n=5,\n    method='tfidf',\n    location=\"New York\",\n    experience=\"Entry level\",\n    work_type=\"Full-time\"\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.652801Z","iopub.execute_input":"2025-05-05T13:32:31.653474Z","iopub.status.idle":"2025-05-05T13:32:31.727282Z","shell.execute_reply.started":"2025-05-05T13:32:31.653446Z","shell.execute_reply":"2025-05-05T13:32:31.726271Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def recommend_with_filters_by_title(\n    job_title,\n    top_n=5,\n    method='tfidf',\n    location=None,\n    experience=None,\n    work_type=None\n):\n    matches = sampled_df[sampled_df['title'].str.lower().str.contains(job_title.lower())]\n    \n    if matches.empty:\n        print(\"No matching job title found.\")\n        return\n\n    job_index = matches.index[0]\n    print(f\"Found match: {sampled_df.iloc[job_index]['title']} (Index: {job_index})\\n\")\n\n    recommend_with_filters(\n        job_index=job_index,\n        top_n=top_n,\n        method=method,\n        location=location,\n        experience=experience,\n        work_type=work_type\n    )","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.728247Z","iopub.execute_input":"2025-05-05T13:32:31.728561Z","iopub.status.idle":"2025-05-05T13:32:31.733847Z","shell.execute_reply.started":"2025-05-05T13:32:31.728534Z","shell.execute_reply":"2025-05-05T13:32:31.732836Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"recommend_with_filters_by_title(\n    job_title=\"Engineer\",\n    top_n=5,\n    method='tfidf',\n    location=\"New York\",\n    experience=\"Entry level\",\n    work_type=\"Full-time\"\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.734849Z","iopub.execute_input":"2025-05-05T13:32:31.735208Z","iopub.status.idle":"2025-05-05T13:32:31.810405Z","shell.execute_reply.started":"2025-05-05T13:32:31.735149Z","shell.execute_reply":"2025-05-05T13:32:31.809133Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"background-color:#1e1e1e; border: 2px solid #3498DB; border-radius:10px; padding:20px; margin-bottom:20px; color:#ECF0F1; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\n\n<h1 style=\"color:#5DADE2; font-size:26px; margin-bottom:10px;\">\nüß† Semantic Hybrid Recommender with BERT\n</h1>\n\n<div style=\"background-color:#273746; border-left: 5px solid #5DADE2; padding:12px; border-radius:6px; margin-top:10px;\">\n‚ö° Powering recommendations using deep semantic embeddings ‚Äî going beyond word counts to meaning.\n</div>\n\n</div>","metadata":{}},{"cell_type":"code","source":"from sentence_transformers import SentenceTransformer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Load pre-trained sentence transformer\nbert_model = SentenceTransformer('all-MiniLM-L6-v2')\n\n# Generate BERT embeddings for hybrid_text\nbert_embeddings = bert_model.encode(sampled_df['hybrid_text'].tolist(), show_progress_bar=True)\n\n# Compute cosine similarity\nbert_sim_matrix = cosine_similarity(bert_embeddings, bert_embeddings)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:32:31.811306Z","iopub.execute_input":"2025-05-05T13:32:31.811551Z","iopub.status.idle":"2025-05-05T13:33:05.061736Z","shell.execute_reply.started":"2025-05-05T13:32:31.81153Z","shell.execute_reply":"2025-05-05T13:33:05.060721Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def recommend_by_bert(job_index, top_n=5):\n    sim_scores = list(enumerate(bert_sim_matrix[job_index]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    top_jobs = sim_scores[1:top_n+1]\n\n    print(f\"Jobs similar to: {sampled_df.iloc[job_index]['title']} (BERT-based)\\n\")\n    for idx, score in top_jobs:\n        print(f\"Title: {sampled_df.iloc[idx]['title']}\")\n        print(f\"Location: {sampled_df.iloc[idx]['location']}\")\n        print(f\"Experience: {sampled_df.iloc[idx]['formatted_experience_level']}\")\n        print(f\"Skills: {sampled_df.iloc[idx]['skills_text']}\")\n        print(f\"Similarity Score: {score:.4f}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:33:05.062773Z","iopub.execute_input":"2025-05-05T13:33:05.063451Z","iopub.status.idle":"2025-05-05T13:33:05.069112Z","shell.execute_reply.started":"2025-05-05T13:33:05.063419Z","shell.execute_reply":"2025-05-05T13:33:05.068072Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"recommend_by_bert(2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:33:05.070124Z","iopub.execute_input":"2025-05-05T13:33:05.070402Z","iopub.status.idle":"2025-05-05T13:33:05.089227Z","shell.execute_reply.started":"2025-05-05T13:33:05.070379Z","shell.execute_reply":"2025-05-05T13:33:05.088369Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def recommend_by_bert_title(title_keyword, top_n=5):\n    matches = sampled_df[sampled_df['title'].str.lower().str.contains(title_keyword.lower())]\n    \n    if matches.empty:\n        print(\"No matching job title found.\")\n        return\n\n    job_index = matches.index[0]\n    print(f\"Found match: {sampled_df.iloc[job_index]['title']} (Index: {job_index})\\n\")\n\n    sim_scores = list(enumerate(bert_sim_matrix[job_index]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    top_jobs = sim_scores[1:top_n+1]\n\n    print(f\"Jobs similar to: {sampled_df.iloc[job_index]['title']} (BERT-based)\\n\")\n    for idx, score in top_jobs:\n        print(f\"Title: {sampled_df.iloc[idx]['title']}\")\n        print(f\"Location: {sampled_df.iloc[idx]['location']}\")\n        print(f\"Experience: {sampled_df.iloc[idx]['formatted_experience_level']}\")\n        print(f\"Skills: {sampled_df.iloc[idx]['skills_text']}\")\n        print(f\"Similarity Score: {score:.4f}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:33:05.090045Z","iopub.execute_input":"2025-05-05T13:33:05.090411Z","iopub.status.idle":"2025-05-05T13:33:05.099122Z","shell.execute_reply.started":"2025-05-05T13:33:05.090375Z","shell.execute_reply":"2025-05-05T13:33:05.098288Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"recommend_by_bert_title(\"Data Analyst\", top_n=5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-05T13:33:05.100081Z","iopub.execute_input":"2025-05-05T13:33:05.100404Z","iopub.status.idle":"2025-05-05T13:33:05.125862Z","shell.execute_reply.started":"2025-05-05T13:33:05.100381Z","shell.execute_reply":"2025-05-05T13:33:05.125037Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"<div style=\"background-color:#1e1e1e; border: 2px solid #3498DB; border-radius:12px; padding:30px; margin-bottom:30px; color:#ECF0F1; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\n\n<h1 style=\"color:#5DADE2; font-size:30px; text-align:center; margin-bottom:20px;\">\nüèÅ Conclusion\n</h1>\n\n<div style=\"background-color:#273746; border-left: 6px solid #5DADE2; padding:15px; border-radius:10px; margin-bottom:20px;\">\n‚ú® This project demonstrates how combining classic text vectorization methods like TF-IDF and Count Vectorizer with modern techniques like BERT embeddings can lead to a <b>robust hybrid job recommender system</b>.\n</div>\n\n<p style=\"font-size:16px; line-height:1.6;\">\nBy leveraging these methods, we‚Äôve created a flexible and explainable system that effectively matches users with job postings based on their skills, title, and experience. This model can be further improved with <b>fine-tuned models</b> and <b>user feedback</b>, potentially integrating more advanced techniques like <b>collaborative filtering</b> for greater accuracy.\n</p>\n\n<p style=\"font-size:16px; font-weight:bold; text-align:center;\">\nüí° <b>Thank you</b> for reviewing this work! Your feedback is always welcome to improve the system further.\n</p>\n\n</div>","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}